import copy
import math
import random
import sys
import time

def tableDistance(a):
	score = 0
	for i in range(0, len(a)):
		score += colDistance(a, i)
	return score

#calculate the column distance for column i
def colDistance(a, i):
	score = 0
	for j in range(0, len(a)):
		for k in range(1, len(a)-j):
			score += abs(a[j][i]-a[j+k][i])
	return score
	
def checkSquare(a):
	if sqrt(a) - floor(sqrt(a)) != 0:
		return 0
	return 1
	
def doubleRow(a, rowIndex):
	b = COPY_PLEASE(a)
	for i in range(0, len(b)):
		b[rowIndex][i] *= 2
	return b
	
def decrementColumn(a, columnIndex):
	for i in range(0, len(a)):
		a[i][columnIndex] -= 1
	return a
	
def colContainsOne(a, columnIndex):
	for i in range(0, len(a)):
		if a[i][columnIndex] == 1:
			return 1
	return 0
	
#Main function for zeroing a table
stepCount = 0
def zero(a):
	global stepCount
	stepCount += 1
	
	print("")
	print("###### Step %d #######" % stepCount)
	printTable(a)
	
	currentScore = tableDistance(a)
	index = [-1]
	score = [sys.maxsize]
	pickLeastBadDouble(a, index, score)
	
	if index[0] == -1 or score[0] > currentScore:
		print("No good doubles... unifying and picking a column to zero")
		unity(a)
		
		bestScore = sys.maxsize
		bestIndex = -1
		for i in range(0, len(a)):
			if colDistance(a, i) < bestScore and isZeroColumn(a, i) == 0:
				bestScore = colDistance(a, i)
				bestIndex = i
		
		#Python just gives up if the scores get too high? Just pick any nonzero column in that case.
		if bestIndex == -1:
			for i in range(0, len(a)):
				if isZeroColumn(a, i) == 0:
					bestIndex = i
		
		a = zeroColumn(a, bestIndex)
	else:
		#print("Current score: %d - Next Best: %d" % (currentScore, score[0]))
		print("Doubling row: %d" % index[0])
		if checkOverflow(a, index[0]):
			overflowAbort(a)
		a = doubleRow(a, index[0])
		
	if isZero(a) == 0:
		if checkMaxStepCount():
			overflowAbort(a)
		zero(a)
	else:
		print("")
		print("Zeroed with only %d recursion steps!" % stepCount)
		printTable(a)
		
def overflowAbort(a):
	global stepCount
	print("")
	print("Overflow on step %d" % stepCount)
	printTable(a)
	exit()

#bring the values in a column to 0
def zeroColumn(a, columnIndex):
	print("Zeroing column: %d" % columnIndex)
	t = time.time()
	while isZeroColumn(a, columnIndex) == 0:
		if time.time() - t > 10:
			t = time.time()
			
			max = 0
			for i in range(0, len(a)):
				if a[i][columnIndex] > max:
					max = a[i][columnIndex]
			
			print("Still zeroing column... %d digits to go" % len(str(max)))
			printTable(a)
		
		#Make sure all rows in column > 1
		for i in range(0, len(a)):
			if a[i][columnIndex] == 1:
				a = doubleRow(a, i)
		
		a = doubleWhileImproving(a, columnIndex)#Close the gap between column elements
		a = decrementWhileNoOne(a, columnIndex)#Decrement in as large of a chunk as possible
		
		#print("Column zeroing round complete")
		#printTable(a)
		#input("Enter")
		
		if isUnityColumn(a, columnIndex):
			a = decrementColumn(a, columnIndex)
	return a
	
#keep doubling rows until column is optimized
def doubleWhileImproving(a, columnIndex):
	improved = True
	largestIndex = -1
	largest = 0
	
	#Don't ever double the largest number in the column.. weird stuff happens when the numbers get super large
	for i in range(0, len(a)):
		if a[i][columnIndex] > largest:
			largest = a[i][columnIndex]
			largestIndex = i
	
	while improved:
		improved = False
		for i in range(0, len(a)):
			if i != largestIndex:
				#print("ColumnScore: %d - %d" % (colDistance(a, columnIndex), colDistance(doubleRow(a, i), columnIndex)))
				
				#Have to double all matching numbers in the column together, otherwise score will get worse before it gets better
				matchingIndices = []
				for j in range(0, len(a)):
					if i!=j and a[i][columnIndex] == a[j][columnIndex]:
						matchingIndices.append(j)
						
				testTable = COPY_PLEASE(a)
				if len(matchingIndices) > 0:
					for index in matchingIndices:
						testTable = doubleRow(testTable, index)
				
				#Double the row we're on
				testTable = doubleRow(testTable, i)
				
				#Must be strictly greater than, otherwise matching indices will double indefinitely
				if colDistance(a, columnIndex) > colDistance(testTable, columnIndex):
					improved = True
					a = testTable
					#print("Improving column score by doubling row %d" % i)
					#printTable(a)
					
	#print("Column optimized")
	#printTable(a)
	#input("Enter")
	return a
	
#keep decrementing until column contains a 1. Do so by doing a bunch of decrements at once to save time.
def decrementWhileNoOne(a, columnIndex):
	if colContainsOne(a, columnIndex) == 0:
		colMin = float('inf')
		for i in range(0, len(a)):
			if a[i][columnIndex] < colMin:
				colMin = a[i][columnIndex]
		
		colMin -= 1
		
		#print("-----")
		#print("Subtracting %d from column %d" % (colMin, columnIndex))
		#printTable(a)
		for i in range(0, len(a)):
			a[i][columnIndex] -= colMin 
		#printTable(a)
		#print("-----")
	return a

#return true if doubling a row will cause overflow, or if stepCount is too high
def checkOverflow(a, rowIndex):
	if checkMaxStepCount():
		return 1
	for i in range(0, len(a[0])):
		if(a[rowIndex][i] >= sys.maxsize / 2):
			return 1
	return 0

#return true if step count gets too high
def checkMaxStepCount():
	global stepCount
	if stepCount > 990:
		return 1
	return 0
		
#return the index of the least bad row to double
#index and score return the index and score of the least bad row
def pickLeastBadDouble(a, index, score):
	score[0] = sys.maxsize
	index[0] = -1
	for i in range(0, len(a)):
		if tableDistance(doubleRow(a, i)) < score[0]:
			score[0] = tableDistance(doubleRow(a, i))
			index[0] = i
	
#decrement each column until it contains at least one 1
def unity(a):
	t = time.time()
	for i in range(0, len(a)):
		if isZeroColumn(a, i) == 0:
			decrementWhileNoOne(a, i)
			
#check if a is all 0's
def isZero(a):
	for i in range(0, len(a)):
		for j in range(0, len(a)):
			if a[i][j] != 0:
				return 0
	return 1

#check if column is all 0
def isZeroColumn(a, columnIndex):
	for i in range(0, len(a)):
		if a[i][columnIndex] != 0:
			return 0
	return 1
	
#check if column is all 1
def isUnityColumn(a, columnIndex):
	for i in range(0, len(a)):
		if a[i][columnIndex] != 1:
			return 0
	return 1

#apparently asking python to actually copy something without any references to it is too much to ask for
def COPY_PLEASE(a):
	new = []
	for i in range(0, len(a)):
		new.append([])
		for j in range(0, len(a[0])):
			new[i].append(a[i][j])
			
	return new

#generate random table of specified size with natural numbers between 1 and 100
def genRandomTable(size):
	table = []
	for i in range(0, size):
		table.append([])
		for j in range(0, size):
			table[i].append(random.randrange(1, 100))
			
	return table

#nicely print a table
def printTable(a):
	maxDigits = 20
	colMax = []
	for i in range(0, len(a)):
		colMax.append(0)
		
	for i in range(0, len(a)):
		for j in range(0, len(a)):
			if len(str(a[i][j])) >= colMax[j]:
				colMax[j] = len(str(a[i][j]))+1
	
	for i in range(0, len(a)):
		for j in range(0, len(a[0])):
			if colMax[j] > maxDigits:
				if a[i][j] > sys.float_info.max:
					sys.stdout.write("TOO_BIG".rjust(11))#Too big for scientific notation lol
				else:
					sys.stdout.write(str("%.3e" %a[i][j]).rjust(11))
			else:
				sys.stdout.write(repr(a[i][j]).rjust(colMax[j]))
		print("")
	print("")

a = genRandomTable(5)
#a
zero(a)